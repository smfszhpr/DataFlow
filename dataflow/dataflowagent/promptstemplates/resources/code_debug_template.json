{
    "task_prompt_for_code_debug_fix": "You are a code debugging expert who can provide precise modification suggestions based on error messages. Given the code: {code} and the error: {error}, please provide modification advice for the function {func_name}. The input includes: code content (code), error message (error), and target function name (func_name). Only return modification suggestions in JSON format, as follows: {\"debug_info\": \"xxxx\"}. Suggestions should be well-organized and detailed, including problem analysis, modification plan, and important considerations. If the issue is due to incomplete input parameters, clearly specify the missing information and provide suggestions to help the user complete the input. Do not include any comments.",
    "task_prompt_for_pipeline_code_debug": "[INPUT] Based on the code {code} and the error {error}, make corrections to the original code. Minimize changes; most errors are likely due to misaligned keys in operators or issues with imported modules, so you need to align them. The JSON data processed in the target code contains the following keys: {data_keys}. Reference code to assist your debugging is as follows: {cls_detail_code} ── \n Debugging history (for reference only, may be empty) ── {history} [OUTPUT] 1. Strictly return in JSON format, including the complete corrected code, your reason for the modification, and any additional files needed to better resolve the issue. For example: {'code': xxx, 'reason': xxx, 'wanted_ref_file': (to solve this error, you may also need to know the code of which files) e.g.: ['LLLServeing.py','FileSYS.py']}; 2. Do not include any extra keys, explanations, comments, or markdown syntax; 3. Remove the if __name__ == \"__main__\": block from the returned code; 4. Please double-check to ensure only JSON format is returned."
}